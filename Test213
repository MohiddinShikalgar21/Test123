@VertxRoute(value = "/kickoffs-cutoffs", method = "GET", filterClass = JWTAuthFilter.class, description = GET_ALL_API_DESCRIPTION)
public void getAllKickoffCutoff(RoutingContext routingContext) {
    try {
        // Use virtual threads to make the call and handle the result synchronously
        List<KickoffCutoffEntity> entities = kickoffCutoffService.findAll(); 

        String message;
        RestResponse<?> restResponse;

        if (entities == null || entities.isEmpty()) {
            message = "Not found";
            log.info(message);
            restResponse = RestResponse.builder()
                    .status(404)
                    .msg(message)
                    .build();
        } else {
            message = "Found Kickoff and cutoffs";
            log.info(message);
            restResponse = RestResponse.builder()
                    .status(200)
                    .msg(message)
                    .data(entities)
                    .build();
        }

        sendResponse(routingContext, restResponse);
    } catch (Exception e) {
        log.error("Error occurred while fetching Kickoff and Cutoff entities: {}", e.getMessage(), e);
        sendErrorResponse(routingContext, e);
    }
}



public List<KickoffCutoffEntity> findAll() {
    try (var connection = applicationContext.getOracleJdbcPool().getConnection()) {
        // Execute the repository method synchronously
        List<KickoffCutoffEntity> results = kickoffCutoffRepository.findAll(connection);

        log.info("Successfully queried kickoff cutoff");
        return results;
    } catch (Exception e) {
        log.error("Error querying kickoff cutoff: {}", e.getMessage(), e);
        throw new RuntimeException("Failed to fetch kickoff cutoff entities", e);
    }
}



public class KickoffCutoffRepository {

    private static final String KICKOFF_CUTOFF_SELECT_ALL = """
        SELECT ID, CURRENCY_ISO_CODE, OUR_ENTITY_ID, SETTLEMENT_METHOD, CALENDAR_CODE, TIMEZONE, CUTOFF_LAG,
        CUTOFF_TIME, TYPE, MESSAGE_TYPE, KICKOFF_LAG, KICKOFF_TIME, BUSINESS_FILTERS FROM KICKOFF_CUTOFF
    """;

    public List<KickoffCutoffEntity> findAll(SqlConnection connection) {
        try {
            return SqlTemplate.forQuery(connection, KICKOFF_CUTOFF_SELECT_ALL)
                    .mapTo(KickoffCutoffEntity.class)
                    .execute(Collections.emptyMap())
                    .map(rowSet -> rowSet.stream().toList()) // Collect rows into a list
                    .result(); // Waits for the result synchronously in a virtual thread
        } catch (Exception e) {
            log.error("CALLED ERROR: Find All KickoffCutoffEntity - {}", e.getMessage(), e);
            throw new RuntimeException("Failed to fetch KickoffCutoffEntity records", e);
        }
    }
}






public List<KickoffCutoffEntity> findAll() {
    SqlConnection connection = null;
    try {
        // Get the connection synchronously using a blocking mechanism
        connection = getConnectionSynchronously();

        // Execute the repository method synchronously
        List<KickoffCutoffEntity> results = kickoffCutoffRepository.findAll(connection);

        log.info("Successfully queried kickoff cutoff");
        return results;
    } catch (Exception e) {
        log.error("Error querying kickoff cutoff: {}", e.getMessage(), e);
        throw new RuntimeException("Failed to fetch kickoff cutoff entities", e);
    } finally {
        if (connection != null) {
            connection.close()
                .onFailure(throwable -> log.error("Error closing connection: {}", throwable.getMessage(), throwable));
        }
    }
}

private SqlConnection getConnectionSynchronously() {
    final CountDownLatch latch = new CountDownLatch(1);
    final AtomicReference<SqlConnection> connectionRef = new AtomicReference<>();
    final AtomicReference<Throwable> errorRef = new AtomicReference<>();

    applicationContext.getOracleJdbcPool().getConnection()
        .onSuccess(connection -> {
            connectionRef.set(connection);
            latch.countDown();
        })
        .onFailure(throwable -> {
            errorRef.set(throwable);
            latch.countDown();
        });

    try {
        latch.await(); // Block the current thread until the connection is obtained
    } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new RuntimeException("Thread interrupted while waiting for connection", e);
    }

    if (errorRef.get() != null) {
        throw new RuntimeException("Failed to obtain connection", errorRef.get());
    }

    return connectionRef.get();
}

